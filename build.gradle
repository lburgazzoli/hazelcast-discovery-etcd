// *****************************************************************************
//
// *****************************************************************************

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'maven'
    id 'idea'
    id 'osgi'
    id 'signing'
    id 'net.researchgate.release' version '2.4.1'
}

apply plugin: 'io.codearte.nexus-staging'

// *****************************************************************************
//
// *****************************************************************************

group               = 'com.github.lburgazzoli'
description         = 'An Etcd based discovery mechanisms for Hazelcast'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    isCI             = Boolean.valueOf("$System.env.CI")
    isPR             = "false" != System.env.TRAVIS_PULL_REQUEST 
    gitRoot          = "https://github.com/lburgazzoli"
    gitProject       = "https://github.com/lburgazzoli/hazelcast-discovery-etcd"
    gitURL           = "git@github.com/lburgazzoli/hazelcast-discovery-etcd.git"
    gradleCiTasks    = (isReleaseVersion || isPR) ? ['clean', 'test'] : ['clean', 'test', 'uploadArchives']

    ext {
        versions = [
            slf4j              : '1.7.13',
            hazelcast          : '3.7.2',
            commonsLang        : '3.4',
            jackson            : '2.8.4',
            junit              : '4.12',
            etcd4j             : '2.8.0',
            groovy             : '2.4.7',
        ]
    }

    bundleImportPackages = [
        '*'
    ]

    bundleExportPackages = [
        "*"
    ]

    if (isReleaseVersion) {
        nexusUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    } else {
        nexusUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    if(!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
        nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
        nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// *************************************************************************
//
// *************************************************************************

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// *************************************************************************
//
// *************************************************************************

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

dependencies {
    compile("org.slf4j:slf4j-api:$versions.slf4j") { transitive = false }
    runtime("org.slf4j:slf4j-ext:$versions.slf4j") { transitive = false }

    compile "org.apache.commons:commons-lang3:$versions.commonsLang"
    compile "com.hazelcast:hazelcast:$versions.hazelcast"
    compile "org.mousio:etcd4j:$versions.etcd4j"

    compile "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-annotations:$versions.jackson"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:$versions.jackson"

    testCompile("org.slf4j:slf4j-simple:$versions.slf4j") { transitive = false }
    testCompile "org.codehaus.groovy:groovy-all:$versions.groovy:indy"
    testCompile "junit:junit:$versions.junit"
}

test {
    testLogging {
         events          'started', 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
         exceptionFormat 'full'
    }
}

[compileJava, compileTestJava]*.options*.compilerArgs = [
    "-Xlint:unchecked",
    "-Xlint:deprecation",
]

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

// *************************************************************************
//
// *************************************************************************

jar {
    baseName = "${project.name}"

    manifest {
        attributes['Bundle-Description'     ] = "${project.name}"
        attributes['Bundle-Name'            ] = "${project.name}"
        attributes['Bundle-SymbolicName'    ] = "${project.group}-${project.name}"
        attributes['Bundle-Version'         ] = project.version.replaceAll('-','.')
        attributes['Implementation-Title'   ] = "${project.group}-${project.name}-${project.version}"
        attributes['Implementation-Version' ] = project.version
        attributes['Implementation-Vendor'  ] = 'Luca Burgazzoli'

        instruction 'Import-Package' , bundleImportPackages.join(',')
        instruction 'Export-Package' , bundleExportPackages.join(',')
    }
}

// *****************************************************************************
// ARTIFACTS
// *****************************************************************************

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// *****************************************************************************
// Publish to Sonatype OSS
// *****************************************************************************

signing {
    required {
        isReleaseVersion
    }

    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: project.nexusUrl) {
                authentication(
                    userName: project.nexusUsername,
                    password: project.nexusPassword
                )
            }

            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            pom.groupId = project.group
            pom.artifactId = project.name
            pom.version = project.version

            pom.project {
                name project.name
                description project.name
                url project.gitProject

                scm {
                    url project.gitProject
                    connection "scm:${project.gitProject}"
                    developerConnection "scm:${project.gitURL}"
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'lburgazzoli'
                        name 'Luca Burgazzoli'
                    }
                }
            }
        }
    }
}

// *****************************************************************************
//
// *****************************************************************************

afterReleaseBuild.dependsOn uploadArchives

task close(dependsOn: 'closeAndPromoteRepository') {
}

task ci(dependsOn: project.gradleCiTasks) {
}
